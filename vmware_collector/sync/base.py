import re

from oslo_log import log

from vmware_collector.common import utils
from vmware_collector.services import gnocchi
from vmware_collector.services import neutron
from vmware_collector.services import nova


LOG = log.getLogger(__name__)


class SyncOperation(object):

    VOLUMES_ATTACHED = 'os-extended-volumes:volumes_attached'

    def __init__(self, conf):
        self.conf = conf
        self.gnocchi_helper = gnocchi.get_gnocchi_helper(self.conf)

    def _grep_actual_id(self, original_resource_id):
        uuid_list = re.findall(
            utils.UUID_RE, original_resource_id, re.IGNORECASE)
        if len(uuid_list) == 2:
            return uuid_list.pop()
        else:
            return None

    def get_resources_attribute(self, resource_type):
        resources = self.gnocchi_helper.get_resources(resource_type)
        resource_attribute_list = []
        for resource in resources:
            resource_dic = {'id': None,
                            'instance_id': None,
                            'original_resource_id': None}
            if resource['ended_at']:
                continue

            if resource_type == 'instance':
                original_resource_id = resource['original_resource_id']
            else:
                original_resource_id = self._grep_actual_id(
                    resource['original_resource_id'])
            if not original_resource_id:
                LOG.warning('This resource: %s is not generated by '
                            'vmware-collector and cannot handle '
                            'this resource', resource['id'])
                continue
            resource_dic['id'] = resource.get('id')
            resource_dic['instance_id'] = resource.get('instance_id')
            resource_dic['original_resource_id'] = original_resource_id
            resource_attribute_list.append(resource_dic)
        return resource_attribute_list

    # return: [{'id': instance_id, 'volume_ids': [], 'port_ids': []}]
    def get_instances_attached_info(self):
        instances = nova.get_all_instances(self.conf)
        instances_info_list = []

        for instance in instances:
            instance = instance._info
            info_dic = {'id': None,
                        'volume_ids': [],
                        'port_ids': []}

            info_dic['id'] = instance.get('id')

            for attached_volume in instance[self.VOLUMES_ATTACHED]:
                info_dic['volume_ids'].append(attached_volume.get('id'))

            nets = instance.get('addresses')
            for net in nets:
                for net_info in nets[net]:
                    port_mac = net_info.get('OS-EXT-IPS-MAC:mac_addr')
                    port_id = neutron.get_port_by_mac(
                        self.conf, port_mac)[0]['id']
                    info_dic['port_ids'].append(port_id)
            instances_info_list.append(info_dic)
        return instances_info_list

    def delete_resources(self, resource_ids):
        for resource_id in resource_ids:
            self.gnocchi_helper.delete_resource(
                resource_id, self.conf.hard_delete)
